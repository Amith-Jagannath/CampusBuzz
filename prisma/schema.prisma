generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

 @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model College {
  id      String   @id @default(uuid())
  name    String   @unique
  state   String
  posts   Post[]
  users  User[]  @relation("CollegeToUsers")
}
model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  belongToCampus  String?
  college         College?   @relation("CollegeToUsers", fields: [belongToCampus], references: [id])
  accounts      Account[]
  sessions      Session[]
  comments    Comment[]
  posts           Post[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}





model Post {
  id          String    @id @default(uuid())
  collegeId   String
  userId      String
  postUrl     String?
  description String
  createdAt   DateTime  @default(now())
  comments    Comment[]
  user        User      @relation(fields: [userId], references: [id])
  college     College   @relation(fields: [collegeId], references: [id])
}

model Comment {
  id          String   @id @default(uuid())
  postId      String
  userId      String
  description String
  createdAt   DateTime  @default(now())
  post        Post     @relation(fields: [postId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

